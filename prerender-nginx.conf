worker_processes 1;

events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
     server_tokens off;

    sendfile        on;
    tcp_nopush      on;

    tcp_nodelay     off;
# Enable Gzip compressed.
  gzip on;
  gzip_disable "msie6";

  # Enable compression both for HTTP/1.0 and HTTP/1.1 (required for CloudFront).
  gzip_http_version  1.0;

  # Compression level (1-9).
  # 5 is a perfect compromise between size and cpu usage, offering about
  # 75% reduction for most ascii files (almost identical to level 9).
  gzip_comp_level    5;

  # Don't compress anything that's already small and unlikely to shrink much
  # if at all (the default is 20 bytes, which is bad as that usually leads to
  # larger files after gzipping).
  gzip_min_length    256;

  # Compress data even for clients that are connecting to us via proxies,
  # identified by the "Via" header (required for CloudFront).
  gzip_proxied       any;

  # Tell proxies to cache both the gzipped and regular version of a resource
  # whenever the client's Accept-Encoding capabilities header varies;
  # Avoids the issue where a non-gzip capable client (which is extremely rare
  # today) would display gibberish if their proxy gave them the gzipped version.
  gzip_vary          on;

  # Compress all output labeled with one of the following MIME-types.
  gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/rss+xml
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/svg+xml
    image/x-icon
    image/webp
    text/css
    text/plain
    text/x-component;
  # text/html is always compressed by HttpGzipModule

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format compression '$remote_addr - $remote_user [$time_local] '
        '"$request" $status $upstream_addr '
        '"$http_referer" "$http_user_agent" "$gzip_ratio"';
    
    server {
        listen       80 default_server;
        #listen       [::]:80 default_server;
        #server_name  YOUR_SITE_GOES_HERE.com;
        root         /var/www;
        index index.html index.htm;

        # Load configuration files for the default server block.
        # include /etc/nginx/default.d/*.conf;
        location ~*  \.(jpg|jpeg|png|webp|gif|ico|css|js|woff|woff2|svg)$ {
            expires 365d;
            access_log off;
            add_header Cache-Control "public";
        }

        location ~* \.(?:css|js)$ {
            try_files $uri =404;
            expires 1y;
            access_log off;
            add_header Cache-Control "public";
        }

        location / {
            try_files $uri @prerender;
        }

        location @prerender {
            proxy_set_header X-Prerender-Token YOUR_TOKEN_GOES_HERE;
            set $prerender 0;
    
            error_page 404 =200 /index.html;

            if ($http_user_agent ~*   "twitterbot|facebookexternalhit|pinterest|slackbot|whatsapp")          {
                set $prerender 1;
            }

            if ($args ~ "_escaped_fragment_") {
                set $prerender 1;
            }

            if ($http_user_agent ~ "Prerender") {
                set $prerender 0;
            }

            if ($uri ~ "\. (js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff|woff2)") {
                set $prerender 0;
            }

            #resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
            resolver 8.8.8.8;

            if ($prerender = 1) {
                #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
                set $prerender "service.prerender.io";
                rewrite .* /$scheme://$host$request_uri? break;
                proxy_pass http://$prerender;
            }

            if ($prerender = 0) {
                rewrite .* /index.html break;
            }
        }
    }
}
